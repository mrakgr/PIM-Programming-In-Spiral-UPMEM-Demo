open upmem
open real_core

inl roundup a b = (a + (b - 1u32)) / b * b

// TODO: These two have too much copying. I wonder if there is a way to expose the underlying numpy buffer?

let dpu_push_array dpu a offset =
    assert ($"!a.nbytes % 8 == 0" : bool) "The input array has to be divisible by 8"
    $"!dpu.copy('buffer',bytearray(!a),offset=!offset)" : ()
let dpu_pull_array dpu a offset =
    assert ($"!a.nbytes % 8 == 0" : bool) "The input array has to be divisible by 8"
    inl v = $"bytearray(!a.nbytes)" : $"bytearray"
    $"!dpu.copy(!v,'buffer',offset=!offset)" : ()
    $"np.copyto(!a,np.frombuffer(!v,dtype=!a.dtype))" : ()

inl dpu_arrays offset f =
    inl rec loop s = function
        | () => (), s
        | (a,b) =>
            inl a,s = loop s a
            inl b,s = loop s b
            (a,b), s
        | {} & a =>
            record_fold (fun {state=(m,s) key value} => 
                inl a,s = loop s value
                {m with $key=a}, s
                ) ({}, s) a
        | a when function_is a => case_fun s a
        | a =>
            typecase `a with
            | a ~dim ~t =>
                inl k, offset = !!!!TagToSymbol(!!!!VarTag(a)), s.offset
                inl len = match s with {len} => len | _ => $"len(!a)" : dim
                inl nbytes = len * conv `dim (sizeof `t)
                upmem_kernel_array `dim `t {offset len}, {s with offset#=fun o => roundup (o + nbytes) 8u32; arrays#=fun ar => {ar with $k={var=a; offset}}}
            | _ =>
                a, s
    and inl case_fun s f =
        inl a,s = loop s (function_term_slots_get f)
        function_term_slots_set f a, s

    loop {offset arrays={}} f

inl dpu_arrays_transfer dpu arrays = record_iter (fun {key value={var offset}} => dpu_push_array dpu var offset) arrays

// Iterates over the tuple of free vars returning var tags mapped to a linear sequence of integer indices.
// This is intended to be in the order the call args would get generated in the kernel.
inl dpu_tags vars =
    inl rec loop s i = function
        | () => s
        | (a,b) =>
            inl k = !!!!TagToSymbol(!!!!VarTag(a))
            loop {s with $k=i} (i + 1) b 
    loop {} 0 vars

// Copies the host runtime vars to WRAM.
inl dpu_pack dpu s vars =
    inl rec loop = function
        | () => ()
        | (a,b) =>
            inl i = s !!!!TagToSymbol(!!!!VarTag(a))
            typecase `a with
            | i8 =>  $"!dpu.v!i = bytearray(struct.pack('b',!a))" : ()
            | i16 => $"!dpu.v!i = bytearray(struct.pack('h',!a))" : ()
            | i32 => $"!dpu.v!i = bytearray(struct.pack('i',!a))" : ()
            | i64 => $"!dpu.v!i = bytearray(struct.pack('q',!a))" : ()
            | u8 =>  $"!dpu.v!i = bytearray(struct.pack('B',!a))" : ()
            | u16 => $"!dpu.v!i = bytearray(struct.pack('H',!a))" : ()
            | u32 => $"!dpu.v!i = bytearray(struct.pack('I',!a))" : ()
            | u64 => $"!dpu.v!i = bytearray(struct.pack('Q',!a))" : ()
            | f32 => $"!dpu.v!i = bytearray(struct.pack('f',!a))" : ()
            | f64 => $"!dpu.v!i = bytearray(struct.pack('d',!a))" : ()
            loop b 
    loop vars

// For transfering the output arrays and variables back to host.
inl dpu_unpack dpu s vars = 
    inl rec loop = function
        | () => ()
        | {} as x => record_iter (fun {key value} => loop value) x
        | (a,b) => loop a . loop b
        | a _ as a =>
            inl {offset} = s.arrays !!!!TagToSymbol(!!!!VarTag(a))
            dpu_pull_array dpu a offset
        | a => 
            inl i = s.vars !!!!TagToSymbol(!!!!VarTag(a))
            typecase `a with
            | i8 =>  $"!a = !dpu.v!i.int8()" : ()
            | i16 => $"!a = !dpu.v!i.int16()" : ()
            | i32 => $"!a = !dpu.v!i.int32()" : ()
            | i64 => $"!a = !dpu.v!i.int64()" : ()
            | u8 =>  $"!a = !dpu.v!i.uint8()" : ()
            | u16 => $"!a = !dpu.v!i.uint16()" : ()
            | u32 => $"!a = !dpu.v!i.uint32()" : ()
            | u64 => $"!a = !dpu.v!i.uint64()" : ()
            | f32 => $"!a = !dpu.v!i.float32()" : ()
            | f64 => $"!a = !dpu.v!i.float64()" : ()
    loop vars

inl default forall dim t. (len : dim) : t = 
    inl rec loop forall t. = 
        typecase t with
        | ~a * ~b => loop `a, loop `b
        | {} => record_type_map (fun k => forall v. => loop `v) `t
        | i8  => $"0" : t
        | i16 => $"0" : t
        | i32 => $"0" : t
        | i64 => $"0" : t
        | u8  => $"0" : t
        | u16 => $"0" : t
        | u32 => $"0" : t
        | u64 => $"0" : t
        | f32 => $"0.0" : t
        | f64 => $"0.0" : t
        | ~a dim ~t => create `a `dim `t len
    loop `t

inl rec assign a b = real
    assert (`(`(a)) `= `(`(b))) "The two types should be equal."
    match a,b with
    | (), () => ()
    | {}, {} => record_iter (fun {key value} => assign value (b key)) a
    | (a,b), (a',b') => assign a a' . assign b b'
    | a,b when prim_is a && prim_is b => $"!a = !b" : ()

inl has_free_vars f = match free_vars f with () => false | _ => true